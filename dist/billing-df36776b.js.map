{"version":3,"file":"billing-df36776b.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/shipping/getLineItemsCount.ts","webpack://checkout/./packages/core/src/app/address/SingleLineStaticAddress.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts"],"sourcesContent":["import {\n    Address,\n    AddressRequestBody,\n    BillingAddress,\n    CustomerAddress,\n} from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(\n    address1?: ComparableAddress,\n    address2?: ComparableAddress,\n): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return (\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\n        isSameState(address1, address2)\n    );\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (\n        address1.stateOrProvinceCode &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    ) {\n        return true;\n    }\n\n    return (\n        address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields,\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(\n    cart: Cart,\n): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion && !item.parentId));\n}\n","import { LineItem } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\nimport React from \"react\";\n\nimport AddressType from \"./AddressType\";\n\nexport interface SingleLineStaticAddressProps {\n    address: Address;\n    type?: AddressType;\n}\n\nexport const getAddressContent: (value: Address) => string = ({\n    firstName,\n    lastName,\n    address1,\n    address2,\n    city,\n    countryCode,\n    stateOrProvince,\n    postalCode,\n}: Address): string => {\n    const addressParts = [address1, address2, city, stateOrProvince, countryCode, postalCode];\n    const nonEmptyAddressParts = addressParts.filter(Boolean);\n    const address = nonEmptyAddressParts.join(', ');\n\n    if (!firstName || !lastName || !address) {\n        return '';\n    }\n\n    return `${firstName} ${lastName}, ${address}`;\n};\n\nconst SingleLineStaticAddress = ({ address }: SingleLineStaticAddressProps) => {\n    const isValid = !isEmpty(address);\n\n    return !isValid ? null : (\n        <div className=\"vcard checkout-address--static\" data-test=\"static-address\">\n            <p className=\"address-entry\">\n                {getAddressContent(address)}\n            </p>\n        </div>\n    );\n}\n\nexport default SingleLineStaticAddress;\n","import React, { FunctionComponent, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\n\nimport { AddressSelectProps } from './AddressSelect';\nimport SingleLineStaticAddress from './SingleLineStaticAddress';\nimport StaticAddress from './StaticAddress';\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses' | 'type' | 'showSingleLineAddress' | 'placeholderText'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\n    selectedAddress,\n    language,\n    type,\n    showSingleLineAddress,\n    placeholderText,\n}) => {\n    const [ariaExpanded, setAriaExpanded] = useState(false);\n\n    const SelectedAddress = () => {\n        if (!selectedAddress) {\n            return placeholderText ?? <TranslatedString id=\"address.enter_address_action\" />;\n        }\n\n        return showSingleLineAddress\n            ? <SingleLineStaticAddress address={selectedAddress} type={type} />\n            : <StaticAddress address={selectedAddress} type={type} />;\n    }\n\n    return (\n        <a\n            aria-controls=\"addressDropdown\"\n            aria-describedby={language.translate('address.enter_or_select_address_action')}\n            aria-expanded={ariaExpanded}\n            className=\"button dropdown-button dropdown-toggle--select\"\n            data-test=\"address-select-button\"\n            href=\"#\"\n            id=\"addressToggle\"\n            onBlur={() => setAriaExpanded(false)}\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\n        >\n            <SelectedAddress />\n        </a>\n    );\n};\n\nexport default withLanguage(AddressSelectButton);\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport AddressSelectButton from './AddressSelectButton';\nimport AddressType from './AddressType';\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nimport './AddressSelect.scss';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    type: AddressType;\n    showSingleLineAddress?: boolean;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n    placeholderText?: React.JSX.Element;\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n    type,\n}) => (\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        {addresses.map((address) => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                data-test=\"address-select-option\"\n                key={address.id}\n            >\n                <a\n                    data-test=\"address-select-option-action\"\n                    href=\"#\"\n                    onClick={preventDefault(() => onSelectAddress(address))}\n                >\n                    <StaticAddress address={address} type={type} />\n                </a>\n            </li>\n        ))}\n    </ul>\n);\n\nconst AddressSelect = ({\n    addresses,\n    selectedAddress,\n    type,\n    showSingleLineAddress,\n    onSelectAddress,\n    onUseNewAddress,\n    placeholderText,\n}: AddressSelectProps) => {\n    const { shouldShowPayPalFastlaneLabel } = usePayPalFastlaneAddress();\n\n    const handleSelectAddress = (newAddress: Address) => {\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        onUseNewAddress(selectedAddress);\n    };\n\n    return (\n        <div className=\"form-field\">\n            <div className=\"dropdown--select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AddressSelectMenu\n                            addresses={addresses}\n                            onSelectAddress={handleSelectAddress}\n                            onUseNewAddress={handleUseNewAddress}\n                            selectedAddress={selectedAddress}\n                            type={type}\n                        />\n                    }\n                >\n                    <AddressSelectButton\n                        addresses={addresses}\n                        placeholderText={placeholderText}\n                        selectedAddress={selectedAddress}\n                        showSingleLineAddress={showSingleLineAddress}\n                        type={type}\n                    />\n                </DropdownTrigger>\n            </div>\n\n            {shouldShowPayPalFastlaneLabel && <PoweredByPayPalFastlaneLabel />}\n        </div>\n    );\n}\n\nexport default memo(AddressSelect);\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(googlePlace: google.maps.places.PlaceResult) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        if (this.getCountry() === 'NZ') {\n            return this._get('sublocality', 'short_name');\n        }\n\n        return this._get('subpremise', 'short_name');\n    }\n\n    getCity(): string {\n        return (\n            this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name')\n        );\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\n    ): string {\n        const element =\n            this._address && this._address.find((field) => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorCA extends AddressSelector {\n    getCity(): string {\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return '';\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n\n    getPostCode(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorCA from './AddressSelectorCA';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const countryComponent = autocompleteData.address_components?.find(\n            component => component.types.indexOf('country') >= 0);\n        const countryShortName = countryComponent?.short_name || '';\n\n        switch (countryShortName) {\n            case 'GB':\n                return new AddressSelectorUK(autocompleteData);\n\n            case 'CA':\n                return new AddressSelectorCA(autocompleteData);\n\n            default:\n                return new AddressSelector(autocompleteData);\n        }\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return <div className=\"popover\">{children}</div>;\n};\n\nexport default Popover;\n","import React, { FunctionComponent, memo } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n     \n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\n            {items.map((item, index) => (\n                <li\n                    className={getItemClassName(highlightedIndex, index)}\n                    data-test={testId && `${testId}-item`}\n                     \n                    {...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    })}\n                    key={index}\n                >\n                    {item.content}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { includes, isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Label } from '../form';\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    defaultHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem | null): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            defaultHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={defaultHighlightedIndex}\n                initialHighlightedIndex={initialHighlightedIndex}\n                initialInputValue={initialValue}\n                itemToString={this.itemToString}\n                labelId={\n                    inputProps && inputProps['aria-labelledby']\n                        ? inputProps['aria-labelledby']\n                        : null\n                }\n                onChange={onSelect}\n                onStateChange={this.handleStateChange}\n                stateReducer={this.stateReducer}\n            >\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\n                    const validInputProps = { ...getInputProps(), ...inputProps };\n\n                    delete validInputProps.labelText;\n\n                    return (\n                        <div>\n                            <input {...validInputProps} />\n                            {inputProps && includes(inputProps.className, 'floating') && (\n                                <Label\n                                    htmlFor={inputProps.id}\n                                    id={inputProps['aria-labelledby']}\n                                    isFloatingLabelEnabled={true}\n                                >\n                                    {inputProps.labelText}\n                                </Label>\n                            )}\n                            {isOpen && !!items.length && (\n                                <Popover>\n                                    <PopoverList\n                                        getItemProps={getItemProps}\n                                        highlightedIndex={\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\n                                        }\n                                        items={items.map((item) => this.toPopoverItem(item))}\n                                        menuProps={getMenuProps()}\n                                        testId={listTestId}\n                                    />\n                                    {children}\n                                </Popover>\n                            )}\n                        </div>\n                    );\n                }}\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\n                );\n                key += 1;\n            }\n\n            lastIndex = offset + length;\n\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem | null): string {\n        return (item && item.value) || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>,\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n            case Downshift.stateChangeTypes.blurInput:\n            case Downshift.stateChangeTypes.blurButton:\n            case Downshift.stateChangeTypes.mouseUp:\n            case Downshift.stateChangeTypes.touchEnd:\n                return {\n                    ...changes,\n                    inputValue: state.inputValue,\n                };\n\n            case Downshift.stateChangeTypes.changeInput:\n                if (changes.inputValue !== state.inputValue && onChange) {\n                    onChange(changes.inputValue || '', state.isOpen);\n                }\n\n                return changes;\n\n            case Downshift.stateChangeTypes.keyDownEnter:\n                return changes;\n\n            default:\n                return changes;\n        }\n    };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch((e) => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(\n        autocompleteWindow.google &&\n            autocompleteWindow.google.maps &&\n            autocompleteWindow.google.maps.places,\n    );\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\nexport interface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\n\n        const { autoComplete, items } = this.state;\n\n        return (\n            <Autocomplete\n                defaultHighlightedIndex={-1}\n                initialHighlightedIndex={-1}\n                initialValue={initialValue}\n                inputProps={{\n                    ...inputProps,\n                    autoComplete,\n                }}\n                items={items}\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={this.onChange}\n                onSelect={this.onSelect}\n                onToggleOpen={onToggleOpen}\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\n        const { fields, onSelect = noop, nextElement } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\n            service.getDetails(\n                {\n                    placeId: item.id,\n                    fields: fields || ['address_components', 'name'],\n                },\n                (result) => {\n                    if (nextElement) {\n                        nextElement.focus();\n                    }\n\n                    onSelect(result, item);\n                },\n            );\n        });\n    };\n\n    private onChange: (input: string) => void = (input) => {\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const { componentRestrictions, types } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\n            service.getPlacePredictions(\n                {\n                    input,\n                    types: types || ['geocode'],\n                    componentRestrictions,\n                },\n                (results) => this.setState({ items: this.toAutocompleteItems(results) }),\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(\n        results?: google.maps.places.AutocompletePrediction[],\n    ): AutocompleteItem[] {\n        return (results || []).map((result) => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLabelId,\n} from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    isFloatingLabelEnabled?: boolean;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\n    field: { default: placeholder, name, maxLength },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n    isFloatingLabelEnabled,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(\n        () => ({\n            className: classNames(\n                'form-input optimizedCheckout-form-input',\n                { 'floating-input': isFloatingLabelEnabled },\n            ),\n            id: getAddressFormFieldInputId(name),\n            'aria-labelledby': labelId,\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\n            labelText: isFloatingLabelEnabled ? labelContent : null,\n            maxLength: maxLength || undefined,\n        }),\n        [name, labelId, placeholder, labelContent, maxLength],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <GoogleAutocomplete\n                apiKey={apiKey}\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\n                initialValue={field.value}\n                inputProps={inputProps}\n                isAutocompleteEnabled={\n                    countryCode ? supportedCountries.indexOf(countryCode) > -1 : false\n                }\n                nextElement={nextElement}\n                onChange={onChange}\n                onSelect={onSelect}\n                onToggleOpen={onToggleOpen}\n            />\n        ),\n        [\n            apiKey,\n            countryCode,\n            inputProps,\n            nextElement,\n            onChange,\n            onSelect,\n            onToggleOpen,\n            supportedCountries,\n        ],\n    );\n\n    const renderLabel = isFloatingLabelEnabled ? null : (\n        <Label htmlFor={inputProps.id} id={labelId} isFloatingLabelEnabled={isFloatingLabelEnabled}>\n            {labelContent}\n        </Label>\n    );\n\n    return (\n        <div\n            className={classNames(\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\n                { 'floating-form-field': isFloatingLabelEnabled },\n            )}\n            data-test=\"google-autocomplete-form-field\"\n        >\n            <FormField\n                input={renderInput}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                label={renderLabel}\n                name={fieldName}\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLegacyName,\n} from './getAddressFormFieldInputId';\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\n        memoize((name) => (value) => {\n            this.syncNonFormikValue(name, value);\n        });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        return (\n            <>\n                <Fieldset>\n                    <div\n                        className=\"checkout-address\"\n                        ref={this.containerRef as RefObject<HTMLDivElement>}\n                    >\n                        {formFields.map((field) => {\n                            const addressFieldName = field.name;\n                            const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                            if (\n                                addressFieldName === 'address1' &&\n                                googleMapsApiKey &&\n                                countriesWithAutocomplete\n                            ) {\n                                return (\n                                    <GoogleAutocompleteFormField\n                                        apiKey={googleMapsApiKey}\n                                        countryCode={countryCode}\n                                        field={field}\n                                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                        key={field.id}\n                                        nextElement={this.nextElement || undefined}\n                                        onChange={this.handleAutocompleteChange}\n                                        onSelect={this.handleAutocompleteSelect}\n                                        onToggleOpen={onAutocompleteToggle}\n                                        parentFieldName={fieldName}\n                                        supportedCountries={countriesWithAutocomplete}\n                                    />\n                                );\n                            }\n\n                            return (\n                                <DynamicFormField\n                                    autocomplete={AUTOCOMPLETE[field.name]}\n                                    extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\n                                        addressFieldName,\n                                    )}`}\n                                    field={field}\n                                    inputId={getAddressFormFieldInputId(addressFieldName)}\n                                    // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                    key={`${field.id}-${field.name}`}\n                                    label={\n                                        field.custom ? (\n                                            field.label\n                                        ) : (\n                                            <TranslatedString id={LABEL[field.name]} />\n                                        )\n                                    }\n                                    onChange={this.handleDynamicFormFieldChange(addressFieldName)}\n                                    parentFieldName={\n                                        field.custom\n                                            ? fieldName\n                                                ? `${fieldName}.customFields`\n                                                : 'customFields'\n                                            : fieldName\n                                    }\n                                    placeholder={this.getPlaceholderValue(\n                                        field,\n                                        translatedPlaceholderId,\n                                    )}\n                                />\n                            );\n                        })}\n                    </div>\n                </Fieldset>\n                {shouldShowSaveAddress && (\n                    <CheckboxFormField\n                        labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\n                        name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\n                    />\n                )}\n            </>\n        );\n    }\n\n    private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\n        const { language } = this.props;\n\n        if (field.default && field.fieldType !== 'dropdown') {\n            return field.default;\n        }\n\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (\n        value,\n        isOpen,\n    ) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem,\n    ) => void = (place, { value: autocompleteValue }) => {\n        const { countries, setFieldValue = noop, onChange = noop } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\n        fieldName,\n        value,\n    ) => {\n        const { formFields, setFieldValue = noop, onChange = noop } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map((field) => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = [],\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find((c) => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...(state ? getState(state, country && country.subdivisions) : {}),\n    };\n}\n\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(\n        (name) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" maxLength={2000} />,\n        [],\n    );\n\n    const legend = useMemo(\n        () => (\n            <Legend>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Legend>\n        ),\n        [],\n    );\n\n    return (\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\n            <FormField id=\"orderComment\" input={renderInput} label={renderLabel} name=\"orderComment\" />\n        </Fieldset>\n    );\n};\n\nexport default OrderComments;\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { RefObject, useRef, useState } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { AddressFormSkeleton, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressForm,\n    AddressFormValues,\n    AddressSelect,\n    AddressType,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isValidCustomerAddress,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\nconst BillingForm = ({\n    googleMapsApiKey,\n    billingAddress,\n    countriesWithAutocomplete,\n    customer: { addresses, isGuest },\n    getFields,\n    countries,\n    isUpdating,\n    setFieldValue,\n    shouldShowOrderComments,\n    values,\n    methodId,\n    isFloatingLabelEnabled,\n    updateAddress,\n    onUnhandledError,\n}: BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\n    const [isResettingAddress, setIsResettingAddress] = useState(false);\n    const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\n    const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n    const shouldRenderStaticAddress = methodId === 'amazonpay';\n    const allFormFields = getFields(values.countryCode);\n    const customFormFields = allFormFields.filter(({ custom }) => custom);\n    const hasCustomFormFields = customFormFields.length > 0;\n    const editableFormFields =\n        shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n    const billingAddresses = isPayPalFastlaneEnabled ? paypalFastlaneAddresses : addresses;\n    const hasAddresses = billingAddresses?.length > 0;\n    const hasValidCustomerAddress =\n        billingAddress &&\n        isValidCustomerAddress(\n            billingAddress,\n            billingAddresses,\n            getFields(billingAddress.countryCode),\n        );\n\n    const handleSelectAddress = async (address: Partial<Address>) => {\n        setIsResettingAddress(true);\n\n        try {\n            await updateAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        } finally {\n            setIsResettingAddress(false);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        handleSelectAddress({});\n    };\n\n    return (\n        <Form autoComplete=\"on\">\n            {shouldRenderStaticAddress && billingAddress && (\n                <div className=\"form-fieldset\">\n                    <StaticBillingAddress address={billingAddress} />\n                </div>\n            )}\n\n            <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\n                {hasAddresses && !shouldRenderStaticAddress && (\n                    <Fieldset id=\"billingAddresses\">\n                        <LoadingOverlay isLoading={isResettingAddress}>\n                            <AddressSelect\n                                addresses={billingAddresses}\n                                onSelectAddress={handleSelectAddress}\n                                onUseNewAddress={handleUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? billingAddress : undefined\n                                }\n                                type={AddressType.Billing}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <AddressFormSkeleton isLoading={isResettingAddress}>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={values.countryCode}\n                            formFields={editableFormFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            setFieldValue={setFieldValue}\n                            shouldShowSaveAddress={!isGuest}\n                        />\n                    </AddressFormSkeleton>\n                )}\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={isUpdating || isResettingAddress}\n                    id=\"checkout-billing-continue\"\n                    isLoading={isUpdating || isResettingAddress}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n            ...mapAddressToFormValues(\n                getFields(billingAddress && billingAddress.countryCode),\n                billingAddress,\n            ),\n            orderComment: customerMessage,\n        }),\n        isInitialValid: ({ billingAddress, getFields, language }) =>\n            !!billingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(billingAddress.countryCode),\n            }).isValidSync(billingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: BillingFormProps & WithLanguageProps) =>\n            methodId === 'amazonpay'\n                ? lazy<Partial<AddressFormValues>>((values) =>\n                      getCustomFormFieldsValidationSchema({\n                          translate: getTranslateAddressError(language),\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  )\n                : lazy<Partial<AddressFormValues>>((values) =>\n                      getAddressFormFieldsValidationSchema({\n                          language,\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  ),\n        enableReinitialize: true,\n    })(BillingForm),\n);\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[],\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import {\n    Address,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\nimport getBillingMethodId from './getBillingMethodId';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, onReady = noop, onUnhandledError } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const { updateAddress, isInitializing, ...props } = this.props;\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <div className=\"form-legend-container\">\n                        <Legend testId=\"billing-address-heading\">\n                            <TranslatedString id=\"billing.billing_address_heading\" />\n                        </Legend>\n                    </div>\n                    <BillingForm\n                        {...props}\n                        onSubmit={this.handleSubmit}\n                        updateAddress={updateAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const { enableOrderComments, googleMapsApiKey } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={{\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    }}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n"],"names":["isEqualAddress","address1","address2","isEqual","normalizeAddress","stateOrProvince","stateOrProvinceCode","isSameState","address","omit","customFields","filter","getShippableItemsCount","cart","lineItems","physicalItems","item","addedByPromotion","parentId","reduce","total","quantity","isEmpty","className","firstName","lastName","city","countryCode","Boolean","join","getAddressContent","withLanguage","selectedAddress","language","type","showSingleLineAddress","placeholderText","useState","ariaExpanded","setAriaExpanded","translate","href","id","onBlur","onClick","preventDefault","StaticAddress","TranslatedString","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","map","key","memo","shouldShowPayPalFastlaneLabel","usePayPalFastlaneAddress","DropdownTrigger","dropdown","newAddress","PoweredByPayPalFastlaneLabel","ADDRESS_FIELD_IDS","postalCode","getAddressFormFieldLegacyName","name","getAddressFormFieldInputId","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","access","element","find","field","types","indexOf","create","autocompleteData","countryComponent","component","short_name","children","getItemClassName","highlightedIndex","index","classes","push","testId","getItemProps","props","menuProps","items","length","content","stateReducer","state","changes","onChange","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","noop","undefined","render","inputProps","initialValue","initialHighlightedIndex","defaultHighlightedIndex","onSelect","listTestId","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","labelText","includes","Label","htmlFor","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","node","slice","i","offset","notHighlightedLength","Fragment","substr","value","PureComponent","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","document","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","setState","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","maxLength","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","getAddressFormFieldLabelId","renderInput","useCallback","country","renderLabel","FormField","LABEL","company","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","forIn","formFields","dateFormFieldNames","custom","fieldType","DynamicFormFieldType","date","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","default","Component","AddressForm","hidden","TextInput","legend","Legend","withFormik","handleSubmit","values","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","orderComment","isInitialValid","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","enableReinitialize","customer","isGuest","isUpdating","shouldShowOrderComments","methodId","updateAddress","onUnhandledError","isResettingAddress","setIsResettingAddress","addressFormRef","useRef","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shouldRenderStaticAddress","allFormFields","customFormFields","hasCustomFormFields","editableFormFields","billingAddresses","hasAddresses","hasValidCustomerAddress","isValidAddress","some","customerAddress","isValidCustomerAddress","handleSelectAddress","Form","StaticBillingAddress","LoadingOverlay","isLoading","AddressType","A","Billing","AddressFormSkeleton","Button","disabled","variant","Primary","getBillingMethodId","checkout","preselectedPayment","payments","payment","isGiftCertificatePayment","isStoreCreditPayment","providerId","getPreselectedPayment","addressValues","updateCheckout","navigateNextStep","promises","formValues","shouldSaveAddress","mapCustomFormFieldsFromFormValues","mapAddressFromFormValues","all","initialize","onReady","isInitializing","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkoutSettings","enableOrderComments","loadBillingAddressFields","updateBillingAddress","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","getRootElement","addEventListener","removeEventListener","componentWillUnmount","placement","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","getElementById","defaultProps","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}